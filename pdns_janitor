#!/usr/bin/python3

from __future__ import print_function

import os
import sys
import json
import socket
import tempfile
import contextlib
import time
import traceback


class LsnrReset(Exception):
    pass


def bdecode(buff):
    """
    On python, convert bytes to string using utf-8 and ascii as a fallback
    """
    if buff is None:
        return buff
    if sys.version_info[0] < 3:
        return buff
    if type(buff) == str:
        return buff
    else:
        return buff.decode("utf-8", errors="ignore")


def msg_encode(data):
    return (json.dumps(data)+'\0').encode()


def msg_decode(message):
    message = bdecode(message).rstrip("\0\x00")
    if len(message) == 0:
        return
    return json.loads(message)


class PdnsJanitor(object):
    def __init__(self):
        self.clustername = None
        self.last = None

    @contextlib.contextmanager
    def lsnr_socket(self):
        if "OPENSVC_LSNR_SOCK" in os.environ:
            lsnr_path = os.environ["OPENSVC_LSNR_SOCK"]
        else:
            lsnr_path = "/var/run/lsnr/lsnr.sock"

        print("init listener socket")
        lsnr = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        try:
            lsnr.settimeout(1)
            lsnr.connect(lsnr_path)
            yield lsnr
        finally:
            lsnr.close()

    @contextlib.contextmanager
    def recursor_socket(self):
        if "OPENSVC_RECURSOR_SOCK" in os.environ:               
            recursor_path = os.environ["OPENSVC_RECURSOR_SOCK"]           
        else:                                                             
            recursor_path = "/var/run/pdns_recursor.controlsocket"
        recursor_dir = os.path.dirname(recursor_path)             
        try:                                                    
            recursor = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            recursor.connect(recursor_path)                            
            yield recursor                                             
        finally:                                                       
            recursor.close()                                           

    def wipe(self):
        domain = self.clustername+"$"
        with self.recursor_socket() as recursor:
            msg = "wipe-cache %s" % domain
            print(">>> " + msg)
            msg = (msg).encode()
            ret = 0
            length = len(msg)
            recursor.sendall(ret.to_bytes(4, 'little'))
            recursor.sendall(length.to_bytes(8, 'little'))
            recursor.sendall(msg)
            recursor.settimeout(1)
            b = recursor.recv(4096)
            ret = int.from_bytes(b[0:4], "little")
            length = int.from_bytes(b[4:12], "little")
            print("<<< [%d] %s" % (ret, b[12:12+length].decode()))

    def event_router(self, data):
        if data is None:
            return
        changes = data.get("data", {})
        wipe = False
        for change in changes:
            try:
                key = change[0]
            except IndexError:
                continue
            if not key:
                continue
            change_len = len(change)
            if change_len == 2:
                # change examples
                # [['monitor', 'nodes', 'n1', 'services', 'status', '3.svcdevops-front', 'resources', 'ip#0', 'status'], 'down']  # noqa
                # [['monitor', 'nodes', 'n1', 'services', 'status', '2.svcdevops-front', 'resources', 'ip#0', 'info', 'ipaddr'], '10.38.0.5']  # noqa
                if len(key) == 9 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status" and \
                   key[6] == "resources" and \
                   key[7].startswith("ip#") and \
                   key[8] == "status":
                    svcname = key[5]
                    print("change", key[2], "instance ip status", svcname, key[-1])
                    wipe = True
                if len(key) == 10 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status" and \
                   key[6] == "resources" and \
                   key[7].startswith("ip#") and \
                   key[8] == "info" and \
                   key[9] == "ipaddr":
                    svcname = key[5]
                    print("change", key[2], "instance ip addr", svcname, key[-1])
                    wipe = True
            elif change_len == 1:
                # delete
                # ex: [['monitor', 'nodes', 'n1', 'services', 'status', '3.svcdevops-front']]
                if len(key) == 6 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status":
                    svcname = key[5]
                    print("delete", key[2], "instance", svcname)
                    wipe = True
        if wipe:
            self.wipe()

    def mainloop(self, lsnr):
        messages = self.recv_messages(lsnr, stream=True)
        for message in messages:
            self.event_router(message)

    def recv_messages(self, sock, stream=False):
        messages = []
        chunks = []
        sep = b"\x00"
        while True:
            try:
                chunk = sock.recv(4096)
            except socket.timeout:
                break
            if stream and chunk == b'':
                # disconnect
                raise LsnrReset('recv stream has no more data (disconnect)')
            if not chunk or chunk == sep:
                break
            chunks.append(chunk)

        if sys.version_info[0] >= 3:
            data = b"".join(chunks)
        else:
            data = "".join(chunks)
        if len(data) == 0:
            return []
        self.last = time.time()
        for message in data.split(sep):
            message = msg_decode(message)
            messages.append(message)
        return messages

    def init_cluster_data(self):
        with self.lsnr_socket() as lsnr:
            if lsnr is None:
                raise LsnrReset("lsnr socket not ready")
            lsnr.sendall(msg_encode({"action": "daemon_status"}))
            data = self.recv_messages(lsnr)[0]
            if data is None:
                raise LsnrReset("unable to get initial cluster data")
            try:
                self.clustername = data["cluster"]["name"]
                print("clustername: %s" % self.clustername)
            except KeyError:
                raise LsnrReset("unable to detect cluster name")
            try:
                if data["dns"]["state"] != "running":
                    raise LsnrReset("dns thread not yet running")
                print('dns thread running')
            except KeyError:
                raise LsnrReset("no dns thread info")

    def main(self):
        while True:
            try:
                self.init_cluster_data()
                #self.wipe()
                with self.lsnr_socket() as lsnr:
                    lsnr.sendall(msg_encode({"action": "events"}))
                    if lsnr is None:
                        raise Exception("lsnr socket not ready")
                    while True:
                        self.mainloop(lsnr)
                        if self.last < time.time() - 30:
                            raise LsnrReset("no event received in the last 30s. reset events socket.")
            except (LsnrReset, ConnectionRefusedError) as error:
                print(error)
            except Exception:  # noqa
                traceback.print_exc()
            time.sleep(1)


if __name__ == "__main__":
    try:
        o = PdnsJanitor()
        o.main()
    except KeyboardInterrupt:
        pass

